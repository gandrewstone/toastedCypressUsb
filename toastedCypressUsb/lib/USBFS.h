//*****************************************************************************
//*****************************************************************************
//  FILENAME: USBFS.h
//   Version: 1.5, Updated on 2009/10/15 at 17:11:37
//  Generated by PSoC Designer 5.0.1127.0
//
//  DESCRIPTION: USB User Module C Language interface file
//-----------------------------------------------------------------------------
//  Copyright (c) Cypress Semiconductor 2009. All Rights Reserved.
//*****************************************************************************
//*****************************************************************************

#ifndef USBFS_H
#define USBFS_H

#include <m8c.h>

//-------------------------------------------------
// USB Device type support for the USBFS API.
//-------------------------------------------------

//-------------------------------------------------
// fastcall16 qualifiers for the USBFS API.
//-------------------------------------------------
#pragma fastcall16 USBFS_Start
#pragma fastcall16 USBFS_Stop
#pragma fastcall16 USBFS_bCheckActivity
#pragma fastcall16 USBFS_bGetConfiguration
#pragma fastcall16 USBFS_bGetEPState
#pragma fastcall16 USBFS_wGetEPCount
#pragma fastcall16 USBFS_LoadInEP
#pragma fastcall16 USBFS_LoadInISOCEP
#pragma fastcall16 USBFS_bReadOutEP
#pragma fastcall16 USBFS_EnableOutEP
#pragma fastcall16 USBFS_EnableOutISOCEP
#pragma fastcall16 USBFS_DisableEP
#pragma fastcall16 USBFS_Force
#pragma fastcall16 USBFS_bGetEPAckState
#pragma fastcall16 USBFS_SetPowerStatus

//-------------------------------------------------
// Prototypes of the USBFS API.
//-------------------------------------------------
extern void USBFS_Start(BYTE bDevice, BYTE bMode);
extern void USBFS_Stop(void);
extern BYTE USBFS_bCheckActivity(void);
extern BYTE USBFS_bGetConfiguration(void);
extern BYTE USBFS_bGetEPState(BYTE bEPNumber);
extern WORD USBFS_wGetEPCount(BYTE  bEPNumber);
extern void USBFS_LoadInEP(BYTE bEPNumber, BYTE * pData, WORD wLength, BYTE bToggle);
extern void USBFS_LoadInISOCEP(BYTE bEPNumber, BYTE * pData, WORD wLength, BYTE bToggle);
extern BYTE USBFS_bReadOutEP(BYTE bEPNumber, BYTE * pData, WORD wLength);
extern void USBFS_EnableOutEP(BYTE bEPNumber);
extern void USBFS_EnableOutISOCEP(BYTE bEPNumber);
extern void USBFS_DisableOutEP(BYTE bEPNumber);
extern void USBFS_Force(BYTE bState);
extern BYTE USBFS_bGetEPAckState(BYTE bEPNumber);
extern void USBFS_SetPowerStatus(BYTE bPowerStaus);

//-------------------------------------------------
// Constants for USBFS API's.
//-------------------------------------------------
#define USB_NO_TOGGLE                  0x00
#define USB_TOGGLE                     0x01

#define USB_FORCE_J                    0xA0
#define USB_FORCE_K                    0x80
#define USB_FORCE_SE0                  0xC0
#define USB_FORCE_NONE                 0x00

#define NO_EVENT_ALLOWED               2
#define EVENT_PENDING                  1
#define NO_EVENT_PENDING               0

#define IN_BUFFER_FULL                 NO_EVENT_PENDING
#define IN_BUFFER_EMPTY                EVENT_PENDING
#define OUT_BUFFER_FULL                EVENT_PENDING
#define OUT_BUFFER_EMPTY               NO_EVENT_PENDING

#define USB_3V_OPERATION               0x02
#define USB_5V_OPERATION               0x03

//-----------------------------------------------
// Transfer Completion Notification
//-----------------------------------------------
#define USB_XFER_IDLE                       0x00
#define USB_XFER_STATUS_ACK                 0x01
#define USB_XFER_PREMATURE                  0x02
#define USB_XFER_ERROR                      0x03

typedef struct {
    BYTE bStatus;
    WORD wLength;  
} T_USB_XFER_STATUS_BLOCK;

//--------------------------------------------------
// Constants for interrupt regs and masks
//--------------------------------------------------
#pragma ioport USBFS_INT_REG1: 0x0DF
BYTE           USBFS_INT_REG1;			
#define USBFS_INT_RESET_MASK 0x04
#define USBFS_INT_SOF_MASK   0x08
#define USBFS_INT_EP0_MASK   0x10
#define USBFS_INT_EP1_MASK   0x20
#define USBFS_INT_EP2_MASK   0x40
#define USBFS_INT_EP3_MASK   0x80
#pragma ioport USBFS_INT_REG2: 0x0DE
BYTE           USBFS_INT_REG2;			
#define USBFS_INT_EP4_MASK   0x01
#define USBFS_INT_EP5_MASK   0x02
#define USBFS_INT_EP6_MASK   0x04
#define USBFS_INT_EP7_MASK   0x08
#define USBFS_INT_EP8_MASK   0x10
#define USBFS_INT_WAKEUP_MASK 0x020

#pragma ioport USBFS_ADDR:                   0x033
BYTE           USBFS_ADDR;
#pragma ioport USBFS_USBIO_CR0:              0x034
BYTE           USBFS_USBIO_CR0;
#pragma ioport USBFS_USBIO_CR1:              0x035
BYTE           USBFS_USBIO_CR1;
#pragma ioport USBFS_USB_CR1:                0x130
BYTE           USBFS_USB_CR1;
#pragma ioport USBFS_EP0MODE:                0x036
BYTE           USBFS_EP0MODE;
#pragma ioport USBFS_EP0CNT:                 0x037
BYTE           USBFS_EP0CNT;
#pragma ioport USBFS_EP0DATA:                0x038
BYTE           USBFS_EP0DATA;
#pragma ioport USBFS_EP1MODE:                0x154
BYTE           USBFS_EP1MODE;
#pragma ioport USBFS_EP1CNT1:                0x041
BYTE           USBFS_EP1CNT1;
#pragma ioport USBFS_EP1CNT0:                0x040
BYTE           USBFS_EP1CNT0;
#pragma ioport USBFS_EP2MODE:                0x155
BYTE           USBFS_EP2MODE;
#pragma ioport USBFS_EP2CNT1:                0x043
BYTE           USBFS_EP2CNT1;
#pragma ioport USBFS_EP2CNT0:                0x042
BYTE           USBFS_EP2CNT0;
#pragma ioport USBFS_EP3MODE:                0x156
BYTE           USBFS_EP3MODE;
#pragma ioport USBFS_EP3CNT1:                0x045
BYTE           USBFS_EP3CNT1;
#pragma ioport USBFS_EP3CNT0:                0x044
BYTE           USBFS_EP3CNT0;
#pragma ioport USBFS_EP4MODE:                0x157
BYTE           USBFS_EP4MODE;
#pragma ioport USBFS_EP4CNT1:                0x047
BYTE           USBFS_EP4CNT1;
#pragma ioport USBFS_EP4CNT0:                0x046
BYTE           USBFS_EP4CNT0;

#pragma ioport USBFS_EP5MODE:                0x158
BYTE           USBFS_EP5MODE;
#pragma ioport USBFS_EP5CNT1:                0x049
BYTE           USBFS_EP5CNT1;
#pragma ioport USBFS_EP5CNT0:                0x048
BYTE           USBFS_EP5CNT0;

#pragma ioport USBFS_EP6MODE:                0x159
BYTE           USBFS_EP6MODE;
#pragma ioport USBFS_EP6CNT1:                0x04b
BYTE           USBFS_EP6CNT1;
#pragma ioport USBFS_EP6CNT0:                0x04a
BYTE           USBFS_EP6CNT0;

#pragma ioport USBFS_EP7MODE:                0x15a
BYTE           USBFS_EP7MODE;
#pragma ioport USBFS_EP7CNT1:                0x04d
BYTE           USBFS_EP7CNT1;
#pragma ioport USBFS_EP7CNT0:                0x04c
BYTE           USBFS_EP7CNT0;

#pragma ioport USBFS_EP8MODE:                0x15b
BYTE           USBFS_EP8MODE;
#pragma ioport USBFS_EP8CNT1:                0x04f
BYTE           USBFS_EP8CNT1;
#pragma ioport USBFS_EP8CNT0:                0x04e
BYTE           USBFS_EP8CNT0;

#pragma ioport USBFS_USB_MISC_CR:            0x1bd
BYTE           USBFS_USB_MISC_CR;

#endif
// end of file USBFS.h
